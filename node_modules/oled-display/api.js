const {PythonShell} = require('python-shell');
const uuid = require('uuid');
const path = require('path');

let count = 0;
let queue = [];
let lastSync = 0;

class ErrorDefault extends Error {
  constructor (message, status) {
    super(message);
    this.name = this.constructor.name;
    Error.captureStackTrace(this, this.constructor);
    this.status = status || -1;
  }
};

class ErrorRecoverable extends Error {
  constructor (message, status) {
    super(message);
    this.name = this.constructor.name;
    Error.captureStackTrace(this, this.constructor);
    this.status = status || -1;
  }
};

class Api {
  constructor(config, dirPath) {
    if (config == null || dirPath == null || config['driver'] == null || config['interface'] == null)
      throw new Exception(`${this._getModule()}: Missing parameter in '${arguments.callee.name}'.`);

    this.config = config;
    this.dirPath = dirPath;

    switch(this.config.driver) {
    case 'SSD1306_128_64':
      this._setSize(128, 64);
      break;
    case 'SSD1306_128_32':
      this._setSize(128, 32);
      break;
    case 'ssd1309_128_64':
      this._setSize(128, 64);
      break;
    case 'ssd1322_256_64':
      this._setSize(256, 64);
      break;
    case 'ssd1325_128_64':
      this._setSize(128, 64);
      break;
    case 'SSD1327_128_128':
      this._setSize(128, 128);
      break;
    case 'SSD1331_96_64':
      this._setSize(96, 64);
      break;
    case 'SSD1351_128_96':
      this._setSize(128, 96);
      break;
    case 'SSH1106_128_64':
      this._setSize(128, 64);
      break;
    default:
      throw new Exception(`${this._getModule()}: Unspecified/Unknown display driver '${config.driver}'.`);
    }
    
    switch(this.config.interface) {
    case 'I2C':
      break;
    case 'SPI':
      break;
    default:
      throw new Exception(`${this._getModule()}: Unknown interface '${config.interface}'.`);
    }
    
    call('init', {
      interface: this.config.interface,
      driver: this.config['driver'],
      i2c_bus: this.config['i2c_bus'] || 0,
      i2c_address: this.config['i2c_address'] || 0x3C,
      spi_rst_pin: this.config['spi_rst_pin'] || 24,
      spi_dc_pin: this.config['spi_dc_pin'] || 23,
      spi_port: this.config['spi_port'] || 0,
      spi_device: this.config['spi_device'] || 0,
      spi_hz: this.config['spi_hz'] || 8000000
    });
    
    if (this.config['background'] != null)
      this.setBackground(this.config['background']);
  }
  
  _getModule() {
    return 'oled-display';
  }
  
  _getMaxFill() {
    return 1;
  }
  
  _setSize(width, height) {
    this.width = width; this.height = height;
    this.outputWidth = width; this.outputHeight = height;
  }
  
  async sync(fps = 0) {
    if (fps == 0)
      return;
    
    if (fps < 0)
      throw new Exception(`${this._getModule()}: Invalid parameter value in '${arguments.callee.name}'.`);
    
    let elapsed = Date.now() - lastSync;
    let remaining = Math.ceil(1000 / fps) - elapsed;
    //console.log(remaining, Math.ceil(1000 / fps), elapsed);

    if (fps && remaining > 0)
      await sleep(remaining);
    
    lastSync = Date.now();
    
    /*let started = Date.now();                         
    let result = await call('sync', {});
    if (!result) { // If failed, clear
      //console.log('clear');                       
      returns.forEach((deferred, key) => {
        deferred.resolve(null);
      });
      
      returns.clear();
    }
      
    let elapsed = Date.now() - started;
    let remaining = Math.ceil(1000 / fps) - elapsed;
    //console.log(remaining, Math.ceil(1000 / fps), elapsed);
    if (fps && remaining > 0)
      await sleep(remaining);
    
    return result;*/
  }
  
  reinit() { // Re-initialises display
    return call('reinit', {}).promise;
  }

  clear(o_fill) { // Clears display to colour
    call('clear', {
      fill: o_fill || this.backColor || 0
    }, true);
  }
  
  rotate(value) { // Clears display to colour
    if (this.rotation == value)
      return; 
    
    if (value == null)
      throw new Exception(`${this._getModule()}: Missing parameter in '${arguments.callee.name}'.`);
    if (fps < 0)
      throw new Exception(`${this._getModule()}: Invalid parameter value in '${arguments.callee.name}'.`);
    
    this.rotation = value;
  
    call('rotate', {
      value: value
    }, true);
    
    if (this.rotation == 0 || this.rotation == 180) {
      this.width = this.getOutputWidth();
      this.height = this.getOutputHeight();
    } else if (this.rotation == 90 || this.rotation == 270) {
      this.width = this.getOutputHeight();
      this.height = this.getOutputWidth();
    }
  }
  
  async render(timeout = 0, o_invert = false) { // Update screen
    if (timeout < 0)
      throw new Exception(`${this._getModule()}: Invalid parameter value in '${arguments.callee.name}'.`);

    let defer = callAdd('render', {'invert': o_invert});
    callQueueSend();
    
    let result = false;
    
    // Timeout
    let timer = null;
    let error = false;
    if (timeout > 0) {
      timer = setTimeout(() => {
        error = true;
        defer.resolve(false);
      }, timeout);
    }
    
    result = await defer.promise;
    
    if (timer)
      clearTimeout(timer);
    
    if (!result) { // If failed, clear
      //console.log('clear');                       
      returns.forEach((deferred, key) => {
        deferred.resolve(null);
      });
      
      returns.clear();
    }
    
    if (error)
      throw new Api.Error('oled-display: Timeout recovering from display error. Please check wiring.');
    
    return result;
  }
  
  drawFuzz() {
    callAdd('drawFuzz', {}, true);
  }
  
  //
  setBackground(fill) {
    if (fill == null)
      throw new Exception(`${this._getModule()}: Missing parameter in '${arguments.callee.name}'.`);
    if (fill < 0 && fill > this._getMaxFill())
      throw new Exception(`${this._getModule()}: Invalid parameter value in '${arguments.callee.name}'.`);

    this.backColor = fill;
  }
  
  setInvert(enable) {
    callAdd('setInvert', {enable: enable}, true);
  }
  
  drawInvertRectangle(x1, y1, x2, y2) {
    if (x1 == null || y1 == null || x2 == null || y2 == null)
      throw new Exception(`${this._getModule()}: Missing parameter in '${arguments.callee.name}'.`);
    
    callAdd('drawInvertRectangle', {x1: x1, y1: y1, x2: x2, y2: y2}, true);
  }
  
  drawInvertRectangleSize(x, y, width, height) {
    if (x == null || y == null || width == null || height == null)
      throw new Exception(`${this._getModule()}: Missing parameter in '${arguments.callee.name}'.`);

    callAdd('drawInvertRectangleSize', {x: x, y: y, width: width, height: height}, true);
  }
  
  setDim(enable) {
    callAdd('setDim', {enable: enable}, true);
  }
  
  setContrast(value) {
    callAdd('setContrast', {value: value}, true);
  }
  
  getOutputWidth() {
    return this.outputWidth;
  }
  
  getOutputHeight() {
    return this.outputHeight;
  }
  
  getWidth() {
    return this.width;
  }
  
  getHeight() {
    return this.height;
  }
  
  drawRectangle(fill, outline = 1, x1, y1, x2, y2) {
    if (fill == null || x1 == null || y1 == null || x2 == null || y2 == null)
      throw new Exception(`${this._getModule()}: Missing parameter in '${arguments.callee.name}'.`);
    if (fill < 0 && fill > this._getMaxFill())
      throw new Exception(`${this._getModule()}: Invalid parameter value in '${arguments.callee.name}'.`);
    
    callAdd('drawRectangle', {fill: fill, outline: outline, x1: x1, y1: y1, x2: x2, y2: y2}, true);
  }
  
  drawRectangleSize(fill, outline = 1, x, y, width, height) {
    if (fill == null || x == null || y == null || width == null || height == null)
      throw new Exception(`${this._getModule()}: Missing parameter in '${arguments.callee.name}'.`);
    if (fill < 0 && fill > this._getMaxFill())
      throw new Exception(`${this._getModule()}: Invalid parameter value in '${arguments.callee.name}'.`);
    
    callAdd('drawRectangleSize', {fill: fill, outline: outline, x: x, y: y, width: width, height: height}, true);
  }
  
  drawLine(fill, x1, y1, x2, y2) {
    if (fill == null || x1 == null || y1 == null || x2 == null || y2 == null)
      throw new Exception(`${this._getModule()}: Missing parameter in '${arguments.callee.name}'.`);
    if (fill < 0 && fill > this._getMaxFill())
      throw new Exception(`${this._getModule()}: Invalid parameter value in '${arguments.callee.name}'.`);
    
    x2 = x2 || this.getHeight() - x1; y2 = y2 || this.getHeight() - y1;
    callAdd('drawLine', {fill: fill, x1: x1, y1: y1, x2: x2, y2: y2}, true);
  }
  
  drawLineDashHor(fill, x, y, o_length, o = {offset: 0, spacing: 1}) {
    if (fill == null || x == null || y == null)
      throw new Exception(`${this._getModule()}: Missing parameter in '${arguments.callee.name}'.`);
    if (fill < 0 && fill > this._getMaxFill())
      throw new Exception(`${this._getModule()}: Invalid parameter value in '${arguments.callee.name}'.`);

    o_length = o_length || this.getWidth() - x;
    callAdd('drawLineDashHor', {fill: fill, x: x, y: y, length: o_length, offset: o['offset'] || 0, spacing: o['spacing'] || 1}, true);
  }
  
  drawLineDashVer(fill, x, y, o_length, o = {offset: 0, spacing: 1}) {
    if (fill == null || x == null || y == null)
      throw new Exception(`${this._getModule()}: Missing parameter in '${arguments.callee.name}'.`);
    if (fill < 0 && fill > this._getMaxFill())
      throw new Exception(`${this._getModule()}: Invalid parameter value in '${arguments.callee.name}'.`);
    
    o_length = o_length || this.getHeight() - y;
    callAdd('drawLineDashVer', {fill: fill, x: x, y: y, length: o_length, offset: o['offset'] || 0, spacing: o['spacing'] || 1}, true);
  }
  
  drawPoint(fill, x, y) {
    if (fill == null || x == null || y == null)
      throw new Exception(`${this._getModule()}: Missing parameter in '${arguments.callee.name}'.`);
    if (fill < 0 && fill > this._getMaxFill())
      throw new Exception(`${this._getModule()}: Invalid parameter value in '${arguments.callee.name}'.`);
    
    callAdd('drawPoint', {fill: fill, x: x, y: y}, true);
  }
  
  drawPixel(...args) {
    this.drawPoint(...args);
  }
  
  drawPoints(fill, ...points) {
    if (fill == null)
      throw new Exception(`${this._getModule()}: Missing parameter in '${arguments.callee.name}'.`);
    if (fill < 0 && fill > this._getMaxFill())
      throw new Exception(`${this._getModule()}: Invalid parameter value in '${arguments.callee.name}'.`);

    callAdd('drawPoints', {fill: fill, points: points}, true);
  }
  
  drawPolygon(fill, outline = 1, ...points) {
    if (fill == null)
      throw new Exception(`${this._getModule()}: Missing parameter in '${arguments.callee.name}'.`);
    if (fill < 0 && fill > this._getMaxFill())
      throw new Exception(`${this._getModule()}: Invalid parameter value in '${arguments.callee.name}'.`);

    callAdd('drawPolygon', {fill: fill, outline: outline, points: points}, true);
  }
  
  drawCircle(fill, outline = 1, x, y, radius) {
    if (fill == null || x == null || y == null || radius == null)
      throw new Exception(`${this._getModule()}: Missing parameter in '${arguments.callee.name}'.`);
    if (fill < 0 && fill > this._getMaxFill())
      throw new Exception(`${this._getModule()}: Invalid parameter value in '${arguments.callee.name}'.`);

    callAdd('circle', {fill: fill, outline: outline, radius: radius, x: x, y: y}, true);
  }
  
  newTarget() {
    return call('newTarget', {}).promise;
  }
  
  setTarget(targetId) {
    callAdd('setTarget', {id: targetId}, true);
  }
  
  resetTarget() {
    callAdd('resetTarget', {}, true);
  }
  
  drawTarget(targetId, x = 0, y = 0, o_width, o_height) {
    callAdd('drawTarget', {id: targetId, x: x, y: y, width: o_width, height: o_height}, true);
  }
  
  loadImage(path) {
    return call('loadImage', {path: path.resolve(this.dirPath, path)}).promise;
  }
  
  drawImage(imageId) {
    callAdd('drawImage', {id: imageId}, true);
  }
  
  loadFont(path, fontName, size) {
    if (path == null || fontName == null || size == null)
      throw new Exception(`${this._getModule()}: Missing parameter in '${arguments.callee.name}'.`);

    return call('loadFont', {path: path.resolve(this.dirPath, path), name: fontName, size: size}).promise;
  }
  
  setFont(fontName) {
    if (fontName == null)
      throw new Exception(`${this._getModule()}: Missing parameter in '${arguments.callee.name}'.`);

    callAdd('setFont', {name: fontName}, true);
  }
  
  getFontWidth(message) {
    if (message == null)
      throw new Exception(`${this._getModule()}: Missing parameter in '${arguments.callee.name}'.`);

    return call('getFontWidth', {message: message}).promise;
  }
  
  getFontHeight(message) {
    if (message == null)
      throw new Exception(`${this._getModule()}: Missing parameter in '${arguments.callee.name}'.`);
    
    return call('getFontHeight', {message: message}).promise;
  }
  
  drawText(fill, message, x, y, halign = 1, valign = 1, wrap = false, o = {vspacing: 2}) {
    if (fill == null || message == null || x == null || y == null)
      throw new Exception(`${this._getModule()}: Missing parameter in '${arguments.callee.name}'.`);
    if (fill < 0 && fill > this._getMaxFill())
      throw new Exception(`${this._getModule()}: Invalid parameter value in '${arguments.callee.name}'.`);

    callAdd('drawText', {fill: fill, message: message, x: x, y: y, wrap: wrap, halign: halign, valign: valign, vspacing: o['vspacing'] || 2}, true);
  }
  
  drawTextMicro(fill, message, x, y, halign = 1, valign = 1, wrap = false, o = {padding: 1, vspacing: 3}) {
    if (fill == null || message == null || x == null || y == null)
      throw new Exception(`${this._getModule()}: Missing parameter in '${arguments.callee.name}'.`);
    if (fill < 0 && fill > this._getMaxFill())
      throw new Exception(`${this._getModule()}: Invalid parameter value in '${arguments.callee.name}'.`);
    
    callAdd('drawTextMicro', {fill: fill, message: message, x: x, y: y, wrap: wrap, halign: halign, valign: valign, padding: o['padding'] || 1, vspacing: o['vspacing'] || 3}, true);
  }
  
  //
  isValidColor(color) {
    return (color != null && color > 0 && color <= this._getMaxFill());
  }
}

// Python stuff
let returns = new Map();

var pyshell = new PythonShell('start.py', {
  mode: 'text',
  pythonPath: '/usr/bin/python3',
  pythonOptions: ['-u'], // get print results in real-time
  scriptPath: __dirname,
  args: ['{}']
});
process.on('exit', function(code) {
  pyshell.end();
  //pyshell.terminate(code);
});
pyshell.on('message', function(data) {
  handle(data);
});

function Deferred() {
  this.promise = new Promise((resolve, reject) => {
    this.reject = reject
    this.resolve = resolve
  })
}

function call(funct, args, noReturn = false) {
  //console.log(returns.size);
  let id = uuid.v4();
  handleSend(id, funct, args, !noReturn);
  pyshell.send(JSON.stringify({id: id, function: funct, args: args || null, r: !noReturn}));//'{ "function": "' + funct + '", "args": ' + JSON.stringify(args) + ' }');
  count++;
  
  if (!noReturn) {
    let deferred = new Deferred();
    returns.set(id, deferred);
    //pyshell.end();
    
    return deferred;
  }
  
  return null;
}

function callQueueSend() {
  let json = JSON.stringify({type: 'multiple', queue: JSON.stringify(queue)});
  //console.log(json)
  pyshell.send(json);//'{ "function": "' + funct + '", "args": ' + JSON.stringify(args) + ' }');
  queue.length = 0
}

function callAdd(funct, args, noReturn = false) {
  //console.log(returns.size);
  let id = uuid.v4();
  handleSend(id, funct, args, !noReturn);
  queue.push({id: id, function: funct, args: args || null, r: !noReturn});//'{ "function": "' + funct + '", "args": ' + JSON.stringify(args) + ' }');
  //count++;
  
  if (!noReturn) {
    let deferred = new Deferred();
    returns.set(id, deferred);
    //pyshell.end();
    
    return deferred;
  }
  
  return null;
}

function handleSend(id, funct, args, r) {
  //pyshell.send(JSON.stringify({id: id, function: funct, args: args || null, r: r}));
  
  //count++;
  
  //console.log(count);
  //console.log(returns.size)
}

function handleReturn(data) {
  count--;
  if (data.value != null) {
    let deferred = returns.get(data.id);
    if (!deferred)
      return;
    returns.delete(data.id);
    deferred.resolve(('value' in data)? data.value: null);
  }
  
  //console.log(count);
}

function handle(data) {
  if (data[0] == '{') {
    data = JSON.parse(data);
    switch(data.type){
    case 'r':
      handleReturn(data);
      break;
    case 'python_error':
      throw new Api.Error(data.message);
    case 'python_error_recoverable':
      throw new Api.ErrorRecoverable(data.message);
    default:
      console.log(data)
      break;
    }
    return;
  }
  
  console.log(data);
}

function sleep(waitTimeInMs) {
  return new Promise(resolve => setTimeout(resolve, waitTimeInMs));
}

Api.Error = ErrorDefault;
Api.ErrorRecoverable = ErrorRecoverable;
module.exports = Api;